generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  passwordHash  String?
  emailVerified DateTime?
  image         String?
  role          Role       @default(CUSTOMER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  addresses     Address[]
  auditLogs     AuditLog[]
  cart          Cart?
  orders        Order[]
  reviews       Review[]
  sessions      Session[]
  wishlistItems Wishlist[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  parentId  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
}

model Product {
  id          String         @id @default(cuid())
  title       String
  slug        String         @unique
  description String?
  price       Decimal
  sku         String?        @unique
  active      Boolean        @default(true)
  categoryId  String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  cartItems   CartItem[]
  inventory   Inventory?
  orderItems  OrderItem[]
  category    Category       @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  reviews     Review[]
  wishlists   Wishlist[]
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  position  Int     @default(0)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Inventory {
  id        String  @id @default(cuid())
  productId String  @unique
  quantity  Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int     @default(1)
  price     Decimal
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  name       String
  line1      String
  line2      String?
  city       String
  state      String?
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  addressId String
  status    String      @default("Pending")
  total     Decimal
  paymentId String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  address   Address     @relation(fields: [addressId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  payment   Payment?
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id          String   @id @default(cuid())
  orderId     String   @unique
  provider    String   @default("stripe")
  providerRef String?
  amount      Decimal
  currency    String   @default("usd")
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  title     String?
  content   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String  @id @default(cuid())
  userId    String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  meta      Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  CUSTOMER
}
